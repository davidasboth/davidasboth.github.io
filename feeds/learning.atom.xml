<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>David Asboth - Data Solutions &amp; Consultancy - Learning</title><link href="/" rel="alternate"></link><link href="/feeds/learning.atom.xml" rel="self"></link><id>/</id><updated>2024-04-28T17:00:00+01:00</updated><entry><title>The gardener's guide to data analysis</title><link href="/gardeners-guide-to-data-analysis.html" rel="alternate"></link><published>2024-04-28T17:00:00+01:00</published><updated>2024-04-28T17:00:00+01:00</updated><author><name>david</name></author><id>tag:None,2024-04-28:/gardeners-guide-to-data-analysis.html</id><summary type="html">&lt;p&gt;How can you continue your journey as a data analyst after foundational training? Think of it as a long-term project, like tending to a garden.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In her book &lt;a href="https://www.penguin.co.uk/books/411088/the-gardener-and-the-carpenter-by-alison-gopnik"&gt;The Gardener and the Carpenter&lt;/a&gt;, Alison Gopnik talks about how parents should think of raising children as gardening, not carpentry. The difference is that in carpentry you are aiming for a specific outcome from the start. Every decision you make takes you towards shaping your child into a version of themselves that you preconceive. In contrast, in the gardening model, your role is to provide a safe and loving environment and let children flourish and grow in their own way. There are a lot of parallels to how to continue learning analyst skills.&lt;/p&gt;
&lt;h3&gt;Gardening vs. carpentry&lt;/h3&gt;
&lt;p&gt;I love the gardening metaphor for improving as an analyst.&lt;/p&gt;
&lt;p&gt;The continued learning process makes more sense as activities to cultivate your skills rather than aiming for a targeted outcome, especially in an industry of constant change. The technologies you thought you needed five years ago are not the same ones you need now. Instead of spending your learning time on the specifics of any technology, most of it should be spent honing the lasting skills.&lt;/p&gt;
&lt;p&gt;Gardening in this context means that once you have done some foundational training in data analysis and have the necessary skills to work on real problems, you should immediately start working on real problems. Rather than narrowly focusing on learning more technical skills, you should adopt the gardening model and have faith that by working on realistic scenarios, you will learn the skills you actually need.&lt;/p&gt;
&lt;p&gt;There is a time and place for the carpentry model; sometimes, you just need to learn something, in which case your focus should be dedicated to that thing. In general, though, the gardening model is what optimises your learning towards a marketable skill set.&lt;/p&gt;
&lt;h3&gt;How to tend to your data garden&lt;/h3&gt;
&lt;p&gt;How do you actually adopt a gardening model of learning? The key, as I have alluded to, is working on real projects. Stop learning libraries, algorithms, and syntax for the sake of it and switch to a problem-first approach. This means solving problems that people actually have, even if that's just yourself, and trusting that you can and will pick up the necessary skills along the way.&lt;/p&gt;
&lt;p&gt;It also means ditching toy examples and tutorials for finding projects to work on. Solving another version of "predicting the survivors of the Titanic" will not get you closer to your goals. A crucial part of an analyst's skill set is defining a problem, so that's the first skill to work on. Find a question that can be answered or a problem that can be solved with data. It does not have to be "business relevant" either, and the solution does not need to be complicated. Sometimes questions can be usefully answered with a single bar chart. As an example, here are some questions I have asked in my daily life, all of which can be (and have been) answered with data:&lt;/p&gt;
&lt;p&gt;Which key signatures should I practise if I want to get better at learning jazz piano but also optimise for key signatures that actually occur in jazz?
Based on my performance playing online chess on chess.com, which openings should I review to target my specific weaknesses?
I wonder which pub name is the most common in the UK?&lt;/p&gt;
&lt;p&gt;As you can see, the problems that you work on do not have to be huge in scope. Each of these small projects taught me something beyond the answer to the question: a new piece of syntax, a new Python library, or data sources I didn't know existed.&lt;/p&gt;
&lt;h3&gt;Gardening is a long-term project&lt;/h3&gt;
&lt;p&gt;Just like gardening, improving as an analyst means constantly turning up and working on cultivating the foundations. It is a long-term process that requires consistency and trust. You will never be "done", but you are always improving. One side effect of doing lots of gardening beyond what grows in the garden is you get better at gardening itself. The side effect of solving lots of problems beyond finding solutions to the problems themselves is that you get better at solving problems. You are also learning how to learn things on the fly to solve a particular problem. Problem-solving and learning how to learn are the skills that will outlast any technology.&lt;/p&gt;
&lt;p&gt;Need more real-world inspiration? My book, &lt;a href="https://www.manning.com/books/solve-any-data-analysis-problem"&gt;Solve Any Data Analysis Problem&lt;/a&gt;, is a collection of projects for you to hone your skills. They are specifically designed to help you learn industry-relevant topics, such as data modelling or working with categorical data, which are not typically part of foundational training.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Learning"></category><category term="learning-highlight"></category></entry><entry><title>Learn data science like you would learn jazz</title><link href="/learning-data-like-jazz.html" rel="alternate"></link><published>2023-06-17T19:00:00+01:00</published><updated>2023-06-17T19:00:00+01:00</updated><author><name>david</name></author><id>tag:None,2023-06-17:/learning-data-like-jazz.html</id><summary type="html">&lt;p&gt;Aspiring analysts want to know how data analysis is done. As it turns out, there are similarities between learning how to analyse data and learning how to play music, especially jazz.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Aspiring analysts want to know how data analysis is done. Beyond the technical skills required to be an analyst, they assume that, surely, learning the discipline of data analysis includes some sort of repeatable process; a step-by-step method to apply to any analytical problem. &lt;strong&gt;Such a method doesn't exist&lt;/strong&gt;. How seasoned analysts do their work is a mixture of technical and interpersonal skills sprinkled with intuition built up through years of just analysing data. This kind of intuition is hard to put down on paper, which for a student is an unsatisfying thing to hear.&lt;/p&gt;
&lt;p&gt;I'm a professional data analyst and educator, and an amateur jazz enthusiast. Hear me out: as it turns out, there are similarities between learning how to analyse data and learning how to play music, especially jazz.&lt;/p&gt;
&lt;h3&gt;Improvisation&lt;/h3&gt;
&lt;p&gt;Jazz has multiple components that make it distinct from other musical genres. What makes jazz unique is that it includes &lt;strong&gt;improvisation&lt;/strong&gt;, where musicians can put their own creative stamp on a piece. Because of this, when you hear a performance of a jazz &lt;em&gt;"standard"&lt;/em&gt;, a popular song that's part of the jazz canon, you never hear the same performance twice. &lt;strong&gt;The individual notes aren't as important as the general structure&lt;/strong&gt;. Jazz musicians don't get given an exact score like classical musicians. In a classical piece, every note is mapped out exactly as the composer intended, and musicians tend to follow this as closely as possible. In jazz, you often just get what's called a &lt;em&gt;lead sheet&lt;/em&gt;, which contains a song's main melody, its structure, and its chords. However, even this loose structure is fungible, and &lt;strong&gt;jazz musicians take many liberties to make a piece their own&lt;/strong&gt;. This has parallels for data analysis.&lt;/p&gt;
&lt;p&gt;Two analysts attempting the same problem will arrive at different results. The problem, the "analytical lead sheet" if you will, is the same, but because their methods, assumptions, and choices will be different, they end up playing a different tune. There is enough uncertainty in data analysis that this doesn't mean either one is wrong. In fact, the two analysts would likely learn something by comparing notes afterwards.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just like jazz musicians don't look back and check whether every note they played was perfect, aspiring analysts shouldn't get bogged down with whether every individual piece of their analysis was the perfect choice.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Chances are there were other, equally acceptable, options at multiple points in the analysis.&lt;/p&gt;
&lt;p&gt;How does one get to a point where they can confidently improvise? Music and data education are both historically very method-driven. They are focused on drilling the fundamentals before moving on to practical applications. However, because jazz is so different from other musical genres, the best way to learn it is also different and the same should be true of data analysis.&lt;/p&gt;
&lt;h3&gt;Songs before scales&lt;/h3&gt;
&lt;p&gt;Rigorous music theory lessons will no doubt make you a better jazz musician. Knowing how notes, scales, and chords interrelate builds a foundation you can use to improve. However, &lt;strong&gt;knowing theory doesn't make you better at the practice&lt;/strong&gt;, in and of itself. You need two things: to &lt;strong&gt;apply your knowledge&lt;/strong&gt; by playing lots of jazz and to learn from the greats. The first is obviously accomplished by sitting down at your instrument and &lt;strong&gt;practising&lt;/strong&gt;. There are no shortcuts here, but one important point is that you want to practise playing songs. Anyone who's ever had lessons in an instrument has had to practice scales and arpeggios. Music lessons typically include these technical practice challenges to hone your skill at the instrument. These are clearly important, but they should not override the purpose of the lessons, which is to make music. If you &lt;strong&gt;focus on songs first&lt;/strong&gt;, learning scales makes more sense since you have the right context for them.&lt;/p&gt;
&lt;p&gt;Just like songs should be the first-class citizen of jazz practice, &lt;strong&gt;projects should be the first-class citizen of learning data analysis&lt;/strong&gt;. Once you have the basics under your belt, that is you know how to load, clean, explore, and visualise a dataset, you shouldn't go and learn 10 more tools or algorithms for the sake of it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;More technical training will not give you the best return on investment on your learning time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is much better to start solving problems &lt;strong&gt;as soon as possible&lt;/strong&gt;, even if you don't have all the necessary skills yet. Attempting an actual data analysis problem will force you to learn exactly what you need, and you will have the right context for those technical components, which you can always learn when you need them.&lt;/p&gt;
&lt;p&gt;There is an important caveat here. You shouldn't learn songs or complete analytical projects &lt;strong&gt;in isolation&lt;/strong&gt;. The way to improve is to do the work, get feedback, and see how the experts do it.&lt;/p&gt;
&lt;h3&gt;Learning from experts&lt;/h3&gt;
&lt;p&gt;To figure out how you can get closer to the greatest jazz artists is by &lt;strong&gt;listening to and analysing how they play&lt;/strong&gt;. Rather than guessing which notes you could have played differently to make your solo sound a bit better, it's more effective to listen to a recording of Miles Davis, John Coltrane, or Duke Ellington, and hear what they did. One piece of advice given to aspiring jazz musicians is to try to &lt;em&gt;transcribe&lt;/em&gt; your favourite solos. The point of attempting to figure out every note that was played isn't to replicate the solo exactly but to see a master at work and pick up some new tricks. Why couldn't we do the same for data analysis?&lt;/p&gt;
&lt;p&gt;When teaching programming, a great tool for the educator is the &lt;strong&gt;code-along&lt;/strong&gt;. Students get a lot of value from an expert instructor talking through every line of code not just to explain the syntax, but to &lt;strong&gt;talk about the wider context&lt;/strong&gt;. On the surface level, the instructor explains the exact command used to remove missing values, but on a deeper level, they reveal the justification for doing so in the first place. This sort of narrated, granular deep dive is incredibly powerful at filling in the gaps in students' knowledge.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Learning from experts by actually seeing them work is underutilised in tech education.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To put my money where my mouth is, I have in the past streamed my attempts at an analytical problem &lt;a href="https://www.twitch.tv/jazzsloth"&gt;on Twitch&lt;/a&gt;, and plan to start doing more of this again. I find that narrating my own thought process helps me learn a lot, too.&lt;/p&gt;
&lt;h3&gt;Jazz up your data analysis learning&lt;/h3&gt;
&lt;p&gt;If you want to get better at analysing data, think like a jazz musician. Don't spend long hours reading dry textbooks of yet another analytical tool or algorithm. Play songs instead. Improvise to put your own stamp on a problem, observe the experts, and, most importantly, &lt;strong&gt;just make some sweet, sweet data jazz&lt;/strong&gt;.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Learning"></category><category term="learning-highlight"></category></entry><entry><title>How generalists learn</title><link href="/learning-as-a-data-generalist.html" rel="alternate"></link><published>2022-11-22T13:54:00+00:00</published><updated>2022-11-22T13:54:00+00:00</updated><author><name>david</name></author><id>tag:None,2022-11-22:/learning-as-a-data-generalist.html</id><summary type="html">&lt;p&gt;One of the most common questions I get from students near the end of a data science course is "what next?". How do you keep learning once you have the basics, especially if you're a generalist?&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the most common questions I get from students near the end of a data science course is "what next?". The subtext is often "what is the next algorithm I should study that we didn't cover in this course?". Even a short data science course will reveal the tremendous breadth of topics that fall under the data science umbrella. Students, understandably, think all those topics should be ticked off before they're ready to be data scientists. I've written about this feeling before; it's impostor syndrome in disguise. In &lt;a href="/impostor-syndrome"&gt;"How to use your impostor syndrome to learn anything"&lt;/a&gt; I detail the most common piece of advice I give to students:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[you] don't need to learn everything up front, [you] just need to be confident enough that [you] can learn anything when [you] need to&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My advice has always been that once you have a foundation, an understanding of how data science and machine learning work, you have enough context to go and learn anything else, and the best way to learn is by doing. This ticks two boxes that I think are important:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Machine learning should be taught &lt;a href="/intuition-first-machine-learning"&gt;intuition first&lt;/a&gt;, i.e. process before equations&lt;/li&gt;
&lt;li&gt;Learning data science/machine learning should be &lt;a href="/realistic-machine-learning"&gt;realistic&lt;/a&gt;, i.e. mimic the real world as closely as possible (real data rather than toy data)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Build, build, build&lt;/h3&gt;
&lt;p&gt;Vicki Boykis talks about how she keeps up to date with her field in &lt;a href="https://vickiboykis.com/2022/11/10/how-i-learn-machine-learning"&gt;"How I learn machine learning"&lt;/a&gt; and she shares one of my conclusions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I cannot emphasize how important it has been for me to build things when I'm learning.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I've never really understood why I struggled to follow a textbook from start to finish. What I now realise is I lacked a goal. Learning algorithm X or method Y for its own sake isn't an interesting enough goal. Solving a problem, answering a question (however trivial) - those are.&lt;/p&gt;
&lt;p&gt;Ergest Xheblati in his &lt;a href="https://ergestx.substack.com"&gt;Data Patterns newsletter&lt;/a&gt; explicitly recommends this approach to maximise your value as a data professional, via what he calls "unstructured learning". In &lt;a href="https://ergestx.substack.com/p/lucrative-career"&gt;"How to build a lucrative career in data"&lt;/a&gt; he says: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Experience is a more direct way to demonstrate that you can create value. One way you can get that experience is through unstructured learning by solving real world problems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Breadth-first&lt;/h3&gt;
&lt;p&gt;Another key piece of advice Vicki gives is "make sure to learn broadly". You often hear about data science being T-shaped, the idea being that you have a breadth of understanding about lots of topics, and only go deep in one or two.&lt;/p&gt;
&lt;p&gt;As these disparate pieces came together in my mind, I realised all this advice is tailored to my generalist mindset. This is not just how I learn, or how I think students can learn effectively; &lt;strong&gt;this is how generalists &lt;em&gt;should&lt;/em&gt; learn&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As a generalist, going deep in a topic for the sake of it has less value than solving a bunch of problems and learning the required skills on the fly. Doing the latter actually strengthens the skill that is your greatest asset. One of the unique selling points of a generalist is that they know a little bit about everything, and can use that knowledge to go deeper as required. I've heard this be called "just in time" learning, rather than "just in case" and it's the generalist's secret weapon.&lt;/p&gt;
&lt;p&gt;Assuming Twitter still exists when you read this, and the thread is still up, read what Ergest has to say about building a "career moat"; a collection of good-enough skills that, when combined, provide you with a unique skill set: &lt;a href="https://twitter.com/ergestx/status/1592117138772398081"&gt;the Twitter thread&lt;/a&gt;. In case that link stops working, here's what I mean:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;My mission and purpose is to help data professionals advance their careers by building a career moat and the best way to do that is by stacking skills. A career moat (as defined by @ejames_c) is a set of rare &amp;amp; valuable skills that allow you to remain competitive in any field.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Specialist roles ("we need a forecasting expert") require deep specialist knowledge, but if you apply for a job that requires a problem solver, breadth beats depth every time.&lt;/p&gt;
&lt;p&gt;In his article &lt;a href="https://counting.substack.com/p/staying-sharp-in-data-science"&gt;"Staying Sharp in Data Science"&lt;/a&gt; Randy Au advocates for even more radically broad learning:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am saying with a straight face, to go out and learn anything that strikes your interest that you can even tangentially relate to your work and interests and then try to apply it to your day job&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Within reason, to a generalist all knowledge is useful knowledge.&lt;/p&gt;
&lt;h3&gt;The generalist's formula&lt;/h3&gt;
&lt;p&gt;What I want you to take away from this is that if, like me, &lt;a href="why-i-now-call-myself-a-data-generalist"&gt;you're a generalist&lt;/a&gt; it's helpful to realise that you probably learn differently from other people, and if you want to lean into your generalism, you should ditch the textbooks and:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Read lots of stuff, even it only seems vaguely relevant&lt;/strong&gt;. Knowing what there is to know is valuable enough without going too deep too soon.&lt;/li&gt;
&lt;li&gt;Build stuff, hone your building skills, and &lt;strong&gt;learn by doing&lt;/strong&gt;. This "stuff" could be something with actual business value, or just a pet project. Personally, the former motivates me less than the latter. I even occasionally livecode some silly idea for an analysis on &lt;a href="https://www.twitch.tv/jazzsloth"&gt;my Twitch channel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you free yourself from a more structured form of learning, you will strengthen your generalist skills, and hopefully have a lot more fun along the way.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Learning"></category><category term="learning-highlight"></category></entry></feed>